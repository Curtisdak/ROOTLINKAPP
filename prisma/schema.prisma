// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 // output   = "../src/generated/prisma"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  firstname      String
  lastname       String
  email          String?        @unique
  emailVerified  DateTime?
  phoneVerified  Boolean        @default(false)
  avatar         String?
  image          String?
  hashedPassword String?
  resetToken     String?
  resetExpires   DateTime?
  role           Role           @default(USER)
  accounts       Account[]
  sessions       Session[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?    
  access_token       String?    
  expires_at         Int?       
  token_type         String?    
  scope              String?    
  id_token           String?    
  session_state      String?    

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model AffiliateProduct {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String
  amazonUrl   String
  price       Float?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  content   String
  readAt    DateTime?
  createdAt DateTime         @default(now())
}

enum Role {
  USER
  ADMIN
  CREATOR
}

enum NotificationType {
  MESSAGE
  NEWUSER
}
